/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import Jama.Matrix;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import model.RWFile;
import model.SVM;

/**
 *
 * @author Filipus
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private String[] classes = {"pubescent bamboo", "chinese horse chestnut",
        "chinese redbud", "true indigo",
        "japanese maple", "nanmu", "castor aralia", "goldenrain tree", "chinese cinnamon",
        "anhui barberry", "big fruited holly", "japanese cheesewood",
        "wintersweet", "camphortree", "japan arrowwood", "sweet osmanthus",
        "deodar", "gingko", "crepe myrtle", "oleander", "yew plum pine",
        "japanese flowering cherry", "glossy privet", "chinese toon", "peach",
        "ford woodlotus", "trident maple", "beals barberry",
        "southern magnolia", "canadian poplar", "chinese tulip tree", "tangerine"};
    private SVM svm = new SVM();
    public GUI() {
        initComponents();
        setTitle("Classification Using SVM Manual");
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        trainDataBtn = new javax.swing.JButton();
        testDataBtn = new javax.swing.JButton();
        sigmaValue = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        totalFeatures = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        featuresList = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        trainDataBtn.setText("Train Data");
        trainDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainDataBtnActionPerformed(evt);
            }
        });

        testDataBtn.setText("Test Data");
        testDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testDataBtnActionPerformed(evt);
            }
        });

        sigmaValue.setText("10");

        jLabel1.setText("Sigma");

        totalFeatures.setText("5");

        jLabel2.setText("Total Features");

        featuresList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "glcm", "morph", "color", "glcm+color","glcm+morph" }));

        jLabel3.setText("Features List");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trainDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(testDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(featuresList, 0, 85, Short.MAX_VALUE)
                            .addComponent(totalFeatures)
                            .addComponent(sigmaValue))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(trainDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(testDataBtn)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sigmaValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(featuresList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(0, 90, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainDataBtnActionPerformed

        //parameter
        String feature = featuresList.getSelectedItem().toString();
        String path = "C:\\Users\\Filipus\\Documents\\NetBeansProjects\\KlasifikasiSVM\\feature-data\\" + feature + "\\" + feature + "-training.csv";
        double sigma = Double.parseDouble(sigmaValue.getText());
        int features = Integer.parseInt(totalFeatures.getText());

        try {
            String[][] dataset = RWFile.getDataFromText2D(path, 961, (features + 1));
            double[][] data = new double[960][features];

            for (int i = 1; i < dataset.length; i++) {
                for (int j = 0; j < dataset[0].length - 1; j++) {
                    data[i - 1][j] = Double.parseDouble(dataset[i][j]);
                }
            }

            for (int index = 0; index < classes.length; index++) {
                double[] classList = new double[961];
                for (int i = 0; i < classList.length - 1; i++) {
                    if (dataset[i][features].equals(classes[index])) {
                        classList[i] = 1;
                    } else {
                        classList[i] = -1;
                    }
                }
                classList[960] = 0;

                //create RBF Matrix
                double[][] rbfMatrix = svm.createRBFMatrix(data, sigma);
                double[][] linearEquation = svm.createLinearEquationMatrix(rbfMatrix, classList);

                Matrix solutions = svm.getSolutions(linearEquation, classList);
                //print solutions
                for (int i = 0; i < linearEquation.length; i++) {
                    System.out.println("X - " + (i + 1) + " : " + solutions.get(i, 0));
//                    textArea.append("X - " + (i + 1) + " : " + solutions.get(i, 0)+"\n");
                }

//                System.out.println("Model for " + classes[index] + " with " + feature + " feature is saved!");
                textArea.append("Model for " + classes[index] + " with " + feature + " feature is saved!"+"\n");
                String saveModel = "C:\\Users\\Filipus\\Documents\\NetBeansProjects\\KlasifikasiSVM\\models\\sigma-" + (int) sigma;
                StringBuilder builder = new StringBuilder();

                for (int i = 0; i < linearEquation.length; i++) {
                    builder.append(solutions.get(i, 0));
                    builder.append(System.getProperty("line.separator"));
                }

                BufferedWriter writer = new BufferedWriter(new FileWriter(saveModel + "\\" + feature + "\\model-" + classes[index] + ".txt"));
                writer.write(builder.toString());//save the string representation of the board
                writer.close();
            }

//                    
            JOptionPane.showMessageDialog(null, "Model Saved!");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_trainDataBtnActionPerformed

    private void testDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testDataBtnActionPerformed
        //parameter
                String feature = featuresList.getSelectedItem().toString();
                String path = "C:\\Users\\Filipus\\Documents\\NetBeansProjects\\KlasifikasiSVM\\feature-data\\" + feature + "\\" + feature + "-training.csv";
                double sigma = Double.parseDouble(sigmaValue.getText());
                int features = Integer.parseInt(totalFeatures.getText());

                try {
                    String[][] dataset = RWFile.getDataFromText2D(path, 961, (features + 1));
                    double[][] data = new double[960][features];

                    for (int i = 1; i < dataset.length; i++) {
                        for (int j = 0; j < dataset[0].length - 1; j++) {
                            data[i - 1][j] = Double.parseDouble(dataset[i][j]);
                        }
                    }
                    
                    double truePositiveRateAvg = 0;
                    
                    for (int index = 0; index < classes.length; index++) {

                        double[] classList = new double[961];
                        for (int i = 0; i < classList.length - 1; i++) {
                            if (dataset[i][5].equals(classes[index])) {
                                classList[i] = 1;
                            } else {
                                classList[i] = -1;
                            }
                        }
                        classList[960] = 0;

                        //get model (alpha and bias)
                        String modelPath = "C:\\Users\\Filipus\\Documents\\NetBeansProjects\\KlasifikasiSVM\\models\\sigma-" + (int) sigma + "\\" + feature + "\\model-" + classes[index] + ".txt";
                        
                        double[] solutions = RWFile.getDataFromText(modelPath, 961);

//                    //get testing data, create RBF matrix test
                        String pathTest = "C:\\Users\\Filipus\\Documents\\NetBeansProjects\\KlasifikasiSVM\\feature-data\\" + feature + "\\" + feature + "-testing.csv";
                        String[][] datasetTest = RWFile.getDataFromText2D(pathTest, 321, (features + 1));
                        double[][] dataTest = new double[320][features];

                        for (int i = 1; i < datasetTest.length; i++) {
                            for (int j = 0; j < datasetTest[0].length - 1; j++) {
                                dataTest[i - 1][j] = Double.parseDouble(datasetTest[i][j]);
                            }
                        }

                        double trueClassified = 0;
                        double falseClassified = 0;

                        int start = 0, end = 0;
                        switch (classes[index]) {
                            case "pubescent bamboo": {
                                start = 0;
                                end = 10;
                                break;
                            }
                            case "chinese horse chestnut": {
                                start = 10;
                                end = 20;
                                break;
                            }
                            case "chinese redbud": {
                                start = 20;
                                end = 30;
                                break;
                            }
                            case "true indigo": {
                                start = 30;
                                end = 40;
                                break;
                            }
                            case "japanese maple": {
                                start = 40;
                                end = 50;
                                break;
                            }
                            case "nanmu": {
                                start = 50;
                                end = 60;
                                break;
                            }
                            case "castor aralia": {
                                start = 60;
                                end = 70;
                                break;
                            }
                            case "goldenrain tree": {
                                start = 70;
                                end = 80;
                                break;
                            }
                            case "chinese cinnamon": {
                                start = 80;
                                end = 90;
                                break;
                            }
                            case "anhui barberry": {
                                start = 90;
                                end = 100;
                                break;
                            }
                            case "big fruited holly": {
                                start = 100;
                                end = 110;
                                break;
                            }
                            case "japanese cheesewood": {
                                start = 110;
                                end = 120;
                                break;
                            }
                            case "wintersweet": {
                                start = 120;
                                end = 130;
                                break;
                            }
                            case "camphortree": {
                                start = 130;
                                end = 140;
                                break;
                            }
                            case "japan arrowwood": {
                                start = 140;
                                end = 150;
                                break;
                            }
                            case "sweet osmanthus": {
                                start = 150;
                                end = 160;
                                break;
                            }
                            case "deodar": {
                                start = 160;
                                end = 170;
                                break;
                            }
                            case "gingko": {
                                start = 170;
                                end = 180;
                                break;
                            }
                            case "crepe myrtle": {
                                start = 180;
                                end = 190;
                                break;
                            }
                            case "oleander": {
                                start = 190;
                                end = 200;
                                break;
                            }
                            case "yew plum pine": {
                                start = 200;
                                end = 210;
                                break;
                            }
                            case "japanese flowering cherry": {
                                start = 210;
                                end = 220;
                                break;
                            }
                            case "glossy privet": {
                                start = 220;
                                end = 230;
                                break;
                            }
                            case "chinese toon": {
                                start = 230;
                                end = 240;
                                break;
                            }
                            case "peach": {
                                start = 240;
                                end = 250;
                                break;
                            }
                            case "ford woodlotus": {
                                start = 250;
                                end = 260;
                                break;
                            }
                            case "trident maple": {
                                start = 260;
                                end = 270;
                                break;
                            }
                            case "beals barberry": {
                                start = 270;
                                end = 280;
                                break;
                            }
                            case "southern magnolia": {
                                start = 280;
                                end = 290;
                                break;
                            }
                            case "canadian poplar": {
                                start = 290;
                                end = 300;
                                break;
                            }
                            case "chinese tulip tree": {
                                start = 300;
                                end = 310;
                                break;
                            }
                            case "tangerine": {
                                start = 310;
                                end = 320;
                                break;
                            }
                        }

                        for (int i = start; i < end; i++) {
                            double[] rbfMatrixTest = svm.createRBFTestMatrix(data, sigma, dataTest[i]);

                            //classify
                            double result = svm.classify(solutions, rbfMatrixTest, classList);
                            if (Math.signum(result) == 1) {
                                trueClassified++;
                            } else {
                                falseClassified++;
                            }
//                            System.out.println("Result of classification: " + result);
//                            System.out.println("====================================");
                        }
                            System.out.println("Total True Classified : " + trueClassified+" for "+classes[index]);
                            textArea.append("Total True Classified : " + trueClassified+" for "+classes[index]+"\n");
                            truePositiveRateAvg += (trueClassified/10);
//                        System.out.println("Total False Classified : " + falseClassified);

                    }
                    System.out.println("True Positive Rate Avg: "+(truePositiveRateAvg/32));
                    textArea.append("True Positive Rate Avg: "+(truePositiveRateAvg/32)+"\n");

                } catch (IOException ex) {
                    ex.printStackTrace();
                }
    }//GEN-LAST:event_testDataBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> featuresList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField sigmaValue;
    private javax.swing.JButton testDataBtn;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField totalFeatures;
    private javax.swing.JButton trainDataBtn;
    // End of variables declaration//GEN-END:variables
}
