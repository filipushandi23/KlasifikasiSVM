/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import javax.swing.JFileChooser;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.SMO;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;

/**
 *
 * @author Filipus
 */
public class GUI_Weka extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private String trainPath = "";
    private String testPath = "";

    public GUI_Weka() {
        initComponents();
        setTitle("Classification Using Weka Library");
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        loadTrainBtn = new javax.swing.JButton();
        loadTestBtn = new javax.swing.JButton();
        sigmaValue = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        classifyBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        loadTrainBtn.setText("Load Train Data");
        loadTrainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTrainBtnActionPerformed(evt);
            }
        });

        loadTestBtn.setText("Load Test Data");
        loadTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTestBtnActionPerformed(evt);
            }
        });

        sigmaValue.setText("10");

        jLabel1.setText("Sigma");

        classifyBtn.setText("Start Classify");
        classifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadTrainBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadTestBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 53, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sigmaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classifyBtn)
                        .addGap(44, 44, 44)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadTrainBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadTestBtn)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sigmaValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(37, 37, 37)
                        .addComponent(classifyBtn)
                        .addGap(0, 101, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadTrainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTrainBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int rVal = fileChooser.showOpenDialog(GUI_Weka.this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            trainPath = fileChooser.getCurrentDirectory().toString() + "\\" + fileChooser.getSelectedFile().getName();
            System.out.println("Path : " + trainPath);
            textArea.append("Training data loaded : " + trainPath+"\n");
        }
    }//GEN-LAST:event_loadTrainBtnActionPerformed

    private void loadTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTestBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int rVal = fileChooser.showOpenDialog(GUI_Weka.this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            testPath = fileChooser.getCurrentDirectory().toString() + "\\" + fileChooser.getSelectedFile().getName();
            System.out.println("Path : " + testPath);
            textArea.append("Testing data loaded : " + testPath+"\n");
        }
    }//GEN-LAST:event_loadTestBtnActionPerformed

    private void classifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyBtnActionPerformed
        try {
            DataSource train = new DataSource(trainPath);
            DataSource test = new DataSource(testPath);
            Instances dataTrain = train.getDataSet();
            Instances dataTest = test.getDataSet();

            dataTrain.setClassIndex(dataTrain.numAttributes() - 1);
            dataTest.setClassIndex(dataTest.numAttributes() - 1);

            SMO smo = new SMO();

            double sigma = Double.parseDouble(sigmaValue.getText());
            String[] options = weka.core.Utils.splitOptions("-C 1.0 -L 0.0010 -P 1.0E-12 -N 0 -V -1 -W 1 -K \"weka.classifiers.functions.supportVector.RBFKernel -C 250007 -G " + sigma + "\"");

            smo.setOptions(options);
            smo.buildClassifier(dataTrain);

            Evaluation eval = new Evaluation(dataTrain);
            eval.evaluateModel(smo, dataTest);
            System.out.println(eval.toSummaryString("\nResults\n======\n", false));
            textArea.append(eval.toSummaryString("\nResults with Sigma = " + sigma + "\n======\n", false));

            System.out.println(eval.toMatrixString());
            textArea.append(eval.toMatrixString());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_classifyBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Weka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Weka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Weka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Weka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Weka().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton classifyBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadTestBtn;
    private javax.swing.JButton loadTrainBtn;
    private javax.swing.JTextField sigmaValue;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
